// A Backtracking program  in C++ to solve Sudoku problem
#include <stdio.h>
#include <cmath>
#include <vector>
#include <queue>
#include <unordered_set>
#include <iostream>
#include <string.h>
#include <time.h> 

using namespace std;
 
// UNASSIGNED is used for empty cells in sudoku grid
#define UNASSIGNED 0
 
// N is used for size of Sudoku grid. Size will be NxN
#define N 16

bool col[N+1][N+1],row[N+1][N+1],f[N+1][N+1];
bool flag = false;

int cnt = 0;
 

void printBoard(std::vector<std::vector<int> > &board) {
  for (int i = 0; i < N; i++) {
    for (int j = 0; j < N; j++)
      cout << board[i][j] << " ";
    cout << endl;
  }
  return;
}

void dfs(vector<vector<int>>& board,int i,int j){
    if(flag == true)  return ;
    if(i >= N){
        flag = true;
        return ;
    }
    if(board[i][j] != 0){
         if(j < N-1)  dfs(board,i,j+1);
         else dfs(board,i+1,0);
         if(flag)  return;
    }

    else{
      //cout << "board = 0: position " << i << " " << j << endl;
        int t = sqrt(N);
        int temp = t*(i/t)+j/t;
        for(int n = 1; n <= N; n++){
            if(!col[j][n] && !row[i][n] && !f[temp][n]){
                board[i][j] = n;
                col[j][n] = row[i][n] = f[temp][n] = true;
                if(j < N-1)  dfs(board,i,j+1);
                else dfs(board,i+1,0);
                col[j][n] = row[i][n] = f[temp][n] = false;
                if(flag)  return;
            }
        }
        board[i][j] = 0;
    }
}

void solveSudoku(vector<vector<int>>& board) {
     memset(col,false,sizeof(col));
     memset(row,false,sizeof(row));
     memset(f,false,sizeof(f));
     for(int i = 0; i < N;i++){
         for(int j = 0; j < N;j++){
             if(board[i][j] == 0)   continue;
             int t = sqrt(N);
             int temp = t*(i/t)+j/t;
             int num = board[i][j];
             col[j][num] = row[i][num] = f[temp][num] = true;
         }
     }
     dfs(board,0,0);
     cout << "flag = " << flag << endl;
}


 
/* Driver Program to test above functions */
int main()
{
    // 0 means unassigned cells
  /*  int grid[N][N] = { { 68, 0, 80, 22, 36, 0, 0, 50, 0 },
{ 31, 63, 16, 61, 0, 0, 0, 79, 48 },
{ 14, 75, 18, 0, 72, 25, 55, 52, 0 },
{ 66, 0, 0, 0, 0, 0, 0, 45, 0 },
{ 0, 0, 42, 0, 12, 0, 26, 0, 38 },
{ 0, 0, 0, 60, 0, 0, 78, 0, 29 },
{ 0, 0, 8, 21, 7, 0, 15, 70, 77 },
{ 0, 37, 59, 20, 24, 19, 64, 9, 4 },
{ 6, 2, 0, 73, 0, 51, 0, 11, 0 },
 };*/
     /*                 
    int grid[N][N] = {{0,11,9,0,0,16,13,4,0,0,14,0,10,6,15,0},
                      {4,12,15,0,3,6,0,11,0,5,0,1,16,7,14,2},
                      {1,0,6,0,15,2,0,0,11,9,10,0,0,0,8,0},
                      {0,13,0,0,0,1,0,0,4,6,0,15,0,0,0,0},
                      {0,0,0,0,0,0,15,0,8,1,5,3,0,4,11,7},
                      {6,0,1,0,0,12,8,0,9,0,0,2,0,0,3,0},
                      {14,0,4,13,6,0,0,3,0,12,7,10,8,0,2,0},
                      {3,8,0,0,4,7,2,0,6,0,0,0,0,12,16,5},
                      {13,0,0,16,0,8,14,10,3,4,15,0,12,5,1,11},
                      {0,0,0,6,2,0,0,1,10,0,11,0,15,3,0,9},
                      {7,0,0,12,0,4,0,15,5,0,9,14,0,0,0,0},
                      {10,0,0,8,0,0,11,0,0,0,1,12,4,0,13,16},
                      {0,0,0,0,0,0,7,0,15,2,0,0,0,0,12,3},
                      {0,0,7,0,0,10,6,0,1,8,0,13,11,0,9,14},
                      {8,6,5,0,0,3,0,0,14,0,0,9,0,0,0,0},
                      {0,16,0,2,0,0,0,14,0,10,0,0,0,0,0,0}};
    */

   /* int grid[N][N] = {{0,1,15,0,0,0,0,0,25,0,2,0,24,0,0,16,19,4,0,0,11,12,0,0,0},
                      {0,0,0,11,0,0,0,20,18,17,6,0,0,4,15,0,0,0,0,14,5,3,23,0,24},
                      {4,0,20,10,0,8,0,13,19,0,12,0,16,0,0,0,0,0,23,7,25,6,0,0,0},
                      {24,0,0,5,0,0,0,7,1,2,19,0,8,0,3,17,6,12,25,0,20,9,0,0,18},
                      {0,0,25,17,0,9,11,6,24,0,0,0,0,14,5,0,1,20,18,2,8,22,4,10,0},
                      {0,15,18,0,8,12,25,0,22,6,17,0,0,24,0,0,0,16,0,0,7,10,9,20,13},
                      {16,7,6,0,0,0,14,0,0,0,5,25,0,8,23,22,0,0,3,13,18,24,0,4,0},
                      {25,9,11,0,0,18,13,0,0,0,22,0,7,6,0,2,14,0,24,0,0,5,17,19,16},
                      {0,20,0,0,0,0,16,4,21,5,13,0,0,19,1,0,0,0,0,10,0,23,3,0,0},
                      {13,14,1,19,12,0,0,24,0,0,9,0,0,10,4,5,8,7,0,18,0,15,6,0,2},
                      {0,0,8,0,0,13,4,23,6,0,18,9,1,3,0,15,0,0,17,0,12,20,2,11,7},
                      {23,0,0,0,7,0,0,0,0,8,11,14,4,25,6,20,10,0,16,19,9,0,0,15,3},
                      {11,2,0,18,0,21,15,25,0,0,0,0,0,0,8,1,0,0,9,0,0,0,0,6,0},
                      {3,0,0,0,16,19,0,0,12,7,20,0,0,21,0,0,0,8,6,11,0,0,0,24,25},
                      {17,0,0,14,1,0,0,9,10,0,0,0,15,0,13,12,4,2,22,25,0,18,0,8,0},
                      {0,0,16,0,19,20,7,2,0,0,3,4,13,1,18,23,0,15,21,0,0,8,12,0,0},
                      {1,11,12,7,21,0,19,5,9,3,16,23,20,0,0,0,18,24,0,0,0,17,0,0,4},
                      {6,18,10,22,17,0,0,0,0,12,0,0,14,9,0,7,25,1,0,5,23,2,0,3,0},
                      {0,0,0,0,0,0,17,0,0,0,10,0,5,0,0,9,0,14,19,20,24,0,25,16,0},
                      {20,0,2,0,0,1,0,0,14,23,15,0,0,17,7,11,0,3,10,16,19,0,18,9,0},
                      {21,3,24,16,18,0,9,0,7,10,0,0,2,0,0,0,13,22,0,17,0,0,20,0,12},
                      {9,10,14,0,0,0,8,1,0,0,0,13,18,0,17,4,16,0,0,23,3,0,24,22,0},
                      {0,0,0,0,25,14,21,22,2,0,0,3,0,16,12,18,5,19,0,24,4,0,15,7,9},
                      {7,22,0,0,0,24,0,3,23,4,0,8,9,20,19,10,0,21,0,6,2,16,13,0,14},
                      {2,4,0,20,13,0,6,12,0,16,0,21,22,23,24,0,15,0,7,1,10,25,0,0,5}};

*/

   int grid[N][N] =  { { 7, 0, 0, 0, 0, 5, 1, 0, 3, 11, 0, 0, 0, 0, 0, 0 },
{ 12, 8, 0, 0, 0, 15, 14, 0, 4, 0, 9, 0, 11, 0, 16, 2 },
{ 0, 15, 10, 2, 13, 0, 0, 0, 0, 7, 0, 5, 8, 0, 3, 0 },
{ 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
{ 0, 0, 1, 0, 0, 2, 0, 0, 15, 0, 0, 0, 5, 0, 0, 11 },
{ 15, 0, 0, 3, 0, 0, 0, 0, 0, 0, 7, 14, 6, 0, 1, 0 },
{ 14, 0, 16, 0, 0, 0, 0, 0, 0, 5, 6, 0, 10, 2, 0, 0 },
{ 0, 0, 12, 0, 0, 0, 0, 8, 9, 1, 10, 13, 16, 0, 0, 3 },
{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 9, 8, 0, 0 },
{ 0, 6, 4, 0, 0, 10, 0, 0, 7, 0, 14, 0, 0, 0, 11, 0 },
{ 0, 16, 0, 12, 0, 3, 9, 0, 10, 0, 0, 8, 0, 0, 5, 0 },
{ 3, 0, 0, 0, 15, 0, 0, 0, 0, 13, 0, 4, 0, 14, 0, 16 },
{ 16, 12, 3, 6, 11, 0, 15, 0, 5, 10, 8, 7, 1, 4, 2, 9 },
{ 9, 2, 7, 14, 6, 8, 12, 4, 0, 16, 15, 1, 3, 11, 10, 5 },
{ 5, 13, 8, 4, 3, 1, 10, 2, 12, 9, 11, 6, 14, 16, 15, 7 },
{ 10, 1, 15, 11, 9, 7, 5, 16, 14, 3, 4, 2, 13, 6, 12, 8 },
 };




/*

    int grid[N][N] = {{0,13,35,0,0,9,33,0,14,0,0,0,36,12,28,0,4,0,10,20,0,0,0,11,0,0,0,31,7,0,25,17,8,0,0,3},
                      {0,28,8,0,0,7,0,0,0,22,23,0,34,0,0,0,6,29,18,0,33,0,0,0,0,9,0,0,0,0,15,20,0,0,24,36},
                      {0,0,5,3,0,0,34,25,4,29,0,0,0,10,0,22,0,9,6,0,16,0,7,0,13,0,14,0,30,8,28,0,0,23,0,26},
                      {11,4,0,0,34,18,0,16,0,10,2,15,7,1,0,0,0,17,8,32,26,22,0,0,0,0,24,0,25,0,14,9,0,31,0,19},
                      {17,0,15,0,36,0,0,5,0,0,35,9,32,0,0,0,11,0,25,19,31,0,3,30,0,0,0,0,0,26,7,27,0,0,12,0},
                      {0,30,32,23,14,0,0,0,8,18,0,21,0,25,0,5,0,19,0,36,24,0,0,15,29,0,0,1,0,0,34,0,0,33,22,2},
                      {0,0,0,24,28,36,16,12,23,14,31,4,0,6,0,0,8,34,20,0,32,25,22,0,0,0,10,5,0,29,0,35,15,18,0,0},
                      {34,0,19,0,6,35,3,27,20,30,0,24,10,22,9,25,0,23,0,26,18,8,1,0,33,0,7,0,0,14,5,0,21,0,36,0},
                      {0,27,0,4,0,30,35,0,0,0,7,0,0,32,1,0,29,0,0,14,0,19,0,0,0,0,9,0,18,0,0,0,26,0,6,0},
                      {0,22,0,20,26,3,0,8,0,0,0,6,0,0,0,0,0,35,30,0,0,28,11,0,0,0,0,4,0,32,19,0,14,34,33,27},
                      {18,0,9,15,8,10,32,0,0,0,34,19,24,14,26,0,7,0,3,27,0,0,35,0,22,0,0,0,23,0,0,1,0,17,13,0},
                      {2,0,0,33,0,32,0,17,0,28,0,0,27,13,0,0,30,4,0,0,0,6,0,34,0,0,1,0,3,0,23,29,0,0,25,11},
                      {1,33,0,0,16,0,0,0,11,0,0,10,0,28,0,0,0,31,23,8,0,0,15,0,0,0,0,0,5,27,0,7,6,2,26,32},
                      {3,23,0,9,17,4,29,31,0,0,0,0,0,0,2,6,20,18,0,7,10,0,13,22,32,8,0,12,35,0,11,19,25,27,0,33},
                      {14,0,0,6,27,0,0,0,16,0,0,20,13,8,10,0,0,15,0,0,4,0,0,0,3,0,0,26,0,23,24,0,0,5,0,0},
                      {0,2,0,21,10,0,0,0,19,3,0,33,0,26,0,0,17,0,0,5,0,29,0,0,0,13,0,34,16,28,4,18,0,36,0,20},
                      {29,0,30,0,0,5,23,32,0,4,9,27,12,0,0,34,0,7,26,11,1,0,0,6,0,21,31,0,15,0,0,0,0,28,16,0},
                      {0,11,20,13,12,25,0,26,7,0,0,2,35,19,0,0,9,0,34,0,27,30,0,3,18,4,0,0,0,33,10,23,17,15,0,1},
                      {0,18,0,0,20,12,0,0,0,0,0,34,6,24,31,0,22,2,35,25,0,0,8,0,0,0,23,33,0,0,16,0,0,29,0,0},
                      {0,32,0,0,0,26,0,23,24,13,0,12,0,0,0,35,0,36,0,30,9,31,20,1,25,0,15,10,2,0,21,0,0,0,0,8},
                      {0,7,13,0,9,0,0,0,6,0,0,36,25,0,23,0,33,0,17,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,20,0},
                      {15,8,0,0,0,0,17,0,2,1,0,0,9,0,0,0,13,14,11,0,0,27,0,23,0,22,20,0,0,0,36,0,33,6,0,4},
                      {0,0,0,0,0,2,25,0,0,0,0,16,0,4,0,0,10,0,14,0,3,15,32,0,0,0,0,0,0,7,0,24,1,0,0,0},
                      {0,0,1,0,0,0,21,0,31,0,27,29,8,0,0,0,15,0,5,22,7,33,6,16,30,0,4,0,0,19,2,0,9,13,0,25},
                      {24,10,0,0,0,0,0,21,32,2,0,0,0,0,0,0,25,6,0,4,0,0,0,12,0,0,18,0,0,0,1,0,0,22,0,0},
                      {0,17,16,0,0,0,30,14,1,0,29,0,22,34,4,0,35,32,0,6,20,5,33,26,23,0,2,0,24,10,0,11,27,0,21,15},
                      {33,0,18,26,21,0,12,6,36,17,4,25,23,0,0,9,14,0,22,28,0,24,16,35,0,19,27,15,1,34,32,13,0,20,10,31},
                      {0,0,2,0,0,0,22,28,0,0,0,0,31,30,24,0,19,20,1,15,0,9,0,0,12,0,0,0,8,5,0,0,0,25,4,0},
                      {0,0,0,0,0,31,19,0,15,0,0,5,29,0,0,0,16,8,0,0,25,23,0,17,35,0,0,0,0,0,0,3,18,14,7,9},
                      {30,15,0,5,3,6,0,9,18,0,33,0,0,36,13,0,2,0,29,0,14,11,31,32,21,20,26,7,4,0,17,16,0,19,0,35},
                      {22,0,25,0,4,28,0,15,9,12,0,0,26,0,0,0,34,27,33,10,0,14,0,0,2,7,5,0,0,0,13,36,31,35,32,0},
                      {5,0,23,17,30,0,0,29,10,0,21,14,3,31,0,8,18,0,0,9,22,0,0,0,0,35,0,27,0,4,0,0,19,7,0,0},
                      {12,0,0,19,35,29,24,20,0,0,0,23,16,7,22,0,36,0,0,0,6,0,0,31,0,0,3,25,32,15,0,0,30,26,2,0},
                      {0,16,27,0,13,0,0,4,0,0,0,31,0,0,30,15,0,0,0,0,34,2,0,0,0,23,0,20,0,0,0,0,28,0,14,0},
                      {36,0,34,18,7,20,0,0,26,6,13,0,0,11,0,12,5,24,0,0,29,32,0,25,0,30,0,22,0,0,0,10,4,0,15,0},
                      {31,0,0,0,0,14,1,35,28,11,0,0,4,0,29,0,0,0,0,13,0,7,0,5,0,10,0,18,34,0,20,6,23,0,3,0}};
      */


    vector<vector<int> > board;
    board.resize(N);
    clock_t t = clock();
    for (int i = 0; i < N; i++) {
      vector<int> v(grid[i], grid[i] + N);
      board[i] = v;
    }

    solveSudoku(board);
    //if (solveSudoku(board) == true)
          printBoard(board);
    //else
    //     printf("No solution exists\n");
    t = clock() - t;
    printf ("It took me %d clicks (%f seconds).\n",t,((float)t)/CLOCKS_PER_SEC);
    return 0;
}